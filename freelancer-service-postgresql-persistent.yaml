apiVersion: v1
kind: Template
labels:
  app: freelancer-service
metadata:
  name: freelancer-postgresql
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: freelancer-service
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 5432
      targetPort: 5432
    selector:
      deploymentconfig: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: freelancer-service
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      recreateParams:
        post:
          execNewPod:
            command:
              - /bin/sh
              - -i
              - -c
              - sleep 10 && PGPASSWORD=$POSTGRESQL_PASSWORD psql -h $FREELANCER_POSTGRESQL_SERVICE_HOST -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c "$POSTGRESQL_INIT"
            containerName: ${APPLICATION_NAME}
            env:
            - name: POSTGRESQL_INIT
              value: CREATE TABLE freelancer (id character varying(255) 
                NOT NULL,firstname character varying(255) NOT NULL,lastname character varying(255) NOT NULL,
                skills character varying(1000));
                ALTER TABLE freelancer OWNER TO jboss;ALTER TABLE ONLY freelancer 
                ADD CONSTRAINT freelancer_pkey PRIMARY KEY (id);
                INSERT into freelancer (id, firstname, lastname, skills) 
                values ('fl01', 'Freelancer', '01', 'C++');
                INSERT into freelancer (id, firstname, lastname, skills) 
                values ('fl02', 'Freelancer', '02', 'Java');
                INSERT into freelancer (id, firstname, lastname, skills) 
                values ('fl03', 'Freelancer', '03', 'HTML');
                INSERT into freelancer (id, firstname, lastname, skills) 
                values ('fl04', 'Freelancer', '04', 'Scala');
                INSERT into freelancer (id, firstname, lastname, skills) 
                values ('fl05', 'Freelancer', '05', 'Android native');
                INSERT into freelancer (id, firstname, lastname, skills) 
                values ('fl06', 'Freelancer', '06', 'IOS native');
          failurePolicy: ignore
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: freelancer-service
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${freelancer_DB_USERNAME}
          - name: POSTGRESQL_PASSWORD
            value: ${freelancer_DB_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${freelancer_DB_NAME}
          image: postgresql
          imagePullPolicy: IfNotPresent
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 5432
            protocol: TCP
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: freelancer-postgresql-data
          livenessProbe:
            initialDelaySeconds: 30
            failureThreshold: 10
            periodSeconds: 10
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 10
            periodSeconds: 10
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 256Mi
        terminationGracePeriodSeconds: 60
        volumes:
        - name: freelancer-postgresql-data
          persistentVolumeClaim:
            claimName: freelancer-postgresql-pv
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: postgresql:latest
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: freelancer-service
    name: freelancer-postgresql-pv
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
parameters:
- description: Application name
  name: APPLICATION_NAME
  required: true
  value: freelancer-postgresql
- description: freelancer Service database user name
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: freelancer_DB_USERNAME
  required: true
- description: freelancer Service database user password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: freelancer_DB_PASSWORD
  required: true
- description: freelancer Service database name
  name: freelancer_DB_NAME
  required: true
  value: freelancerdb